{"version":3,"sources":["context/Storage.js","components/Home.js","GameUtils.js","models/Game.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["STORAGE_KEY","StorageContext","createContext","initialState","JSON","parse","localStorage","getItem","ACTIONS","reducer","state","action","type","payload","map","e","id","Error","stringify","StorageProvider","children","useReducer","dispatch","useEffect","setItem","Provider","value","set","create","item","length","created_at","Date","now","update","updated","find","needle","useStorage","useContext","Home","history","useHistory","games","title","data-testid","onClick","push","icon","FileAddOutlined","locale","emptyText","itemLayout","dataSource","pagination","pageSize","hideOnSinglePage","renderItem","game","Item","Meta","avatar","CheckCircleOutlined","to","name","description","toLocaleString","shuffle","a","result","sort","_","min","max","Math","floor","random","randomNumberRangeArray","from","Array","keys","filter","range","TombolaModel","number","winner","this","json","Object","assign","BingoModel","GameModel","min_ticket","max_ticket","bingo_numbers","bingo_pool","bingos","tombola_numbers","tombola_pool","tombolas","pop","shuffleBingo","shuffleTombola","b","bingo","index","findIndex","slice","lastBingo","indexOf","t","tombola","m","toJSON","model","j","ballColors","formLayout","labelCol","span","wrapperCol","buttonLayout","offset","CreateGame","useState","setMin","setMax","justify","gutter","flex","initialValues","remember","requiredMark","onFinish","newGame","label","rules","required","message","placeholder","Group","compact","style","width","onChange","v","htmlType","ShowGame","showTombola","setShowTombola","setTombola","selected","setSelected","editing","setEditing","onEdit","onSelect","placement","disabled","size","drawBingoNumber","shape","PlusOutlined","CompassOutlined","danger","SaveOutlined","padding","BingoNumbers","border","activeNum","BingoForm","onSave","addBingo","onClose","onDelete","removeBingo","BingoList","TombolaList","height","closable","visible","getContainer","position","Tombola","num","bingoAfter","getBingo","newBingo","backgroundColor","color","count","HomeOutlined","exists","isLastBingo","marginTop","values","localeType","initialValue","CloseSquareOutlined","DeleteOutlined","contentStyle","lineHeight","textAlign","background","boxStyle","display","alignItems","justifyContent","carouselRef","useRef","running","setRunning","setNumber","ticks","pid","setInterval","console","log","clearInterval","drawTombolaNumber","current","next","className","TombolaBall","ref","TombolaForm","addTombola","loading","reverse","ballStyle","textShadow","fontSize","fontWeight","borderRadius","getTombola","newTombola","cursor","GameView","idS","useParams","parseInt","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAEMA,EAAc,QACdC,EAAiBC,wBAAc,IAC/BC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQP,KAAiB,GAChEQ,EACC,MADDA,EAEI,SAFJA,EAGI,SAGV,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKJ,EACH,OAAOG,EAAOE,SAAW,GAC3B,KAAKL,EACH,MAAM,GAAN,mBAAWE,GAAX,CAAkBC,EAAOE,UAC3B,KAAKL,EACH,OAAOE,EAAMI,KAAI,SAACC,GAAD,OACfA,EAAEC,KAAOL,EAAOE,QAAQG,GAAKL,EAAOE,QAAUE,KAElD,QACE,MAAM,IAAIE,MAAJ,8BAAiCb,KAAKc,UAAUP,MAI5D,IAAMQ,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACdC,qBAAWZ,EAASN,GADN,mBACjCO,EADiC,KAC1BY,EAD0B,KAOxC,OAJAC,qBAAU,WACRjB,aAAakB,QAAQxB,EAAaI,KAAKc,UAAUR,MAChD,CAACA,IAGF,cAACT,EAAewB,SAAhB,CACEC,MAAO,CACLhB,QACAiB,IAAK,SAACd,GACJS,EAAS,CAAEV,KAAMJ,EAAaK,aAEhCe,OAAQ,SAACC,GACP,IAAMhB,EAAO,aACXG,GAAIN,EAAMoB,OAAS,EACnBC,WAAYC,KAAKC,OACdJ,GAGL,OADAP,EAAS,CAAEV,KAAMJ,EAAgBK,YAC1BA,GAETqB,OAAQ,SAACL,GACP,IAAMhB,EAAO,2BAAQgB,GAAR,IAAcM,QAASH,KAAKC,QAEzC,OADAX,EAAS,CAAEV,KAAMJ,EAAgBK,YAC1BA,GAETuB,KAAM,SAACC,GACL,OAAO3B,EAAM0B,MAAK,qBAAGpB,KAAgBqB,OArB3C,SAyBGjB,KAKDkB,EAAa,kBAAMC,qBAAWtC,I,sDClBrBuC,MAzCf,WACE,IAAIC,EAAUC,cACCC,EAAUL,IAAjB5B,MAER,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASkC,MAAM,qBAAf,SACE,cAAC,IAAD,CACEC,cAAY,qBACZC,QAAS,kBAAML,EAAQM,KAAK,UAC5BnC,KAAK,UACLoC,KAAM,cAACC,EAAA,EAAD,IAJR,yBAUF,cAAC,IAAD,CACEC,OAAQ,CAAEC,UAAW,8BACrBC,WAAW,aACXC,WAAYV,EACZW,WAAY,CACVC,SAAU,GACVC,kBAAkB,GAEpBC,WAAY,SAACC,GAAD,OACV,cAAC,IAAKC,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACEC,OAAQ,cAACC,EAAA,EAAD,IACRlB,MAAO,cAAC,IAAD,CAAMmB,GAAE,gBAAWL,EAAK1C,IAAxB,SAA+B0C,EAAKM,OAC3CC,YAAW,UAAKP,EAAKM,KAAV,aAAmB,IAAIhC,KAChC0B,EAAK3B,YACLmC,6B,yKC1BT,SAASC,EAAQC,GACtB,IAAMC,EAAM,YAAOD,GAEnB,OADAC,EAAOC,MAAK,SAACC,GAAD,OANYC,GAMM,EANDC,EAMI,EAL1BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAM,EAAID,GAAOA,GAD/C,IAAmBA,EAAKC,KAOtBJ,EAGF,SAASQ,EAAuBJ,EAAKD,GAC1C,OAAOL,EAlBF,SAAeJ,GAAe,IAAXe,EAAU,uDAAH,EAC/B,OAAKf,EAGE,YAAIgB,MAAMhB,EAAK,GAAGiB,QAAQC,QAAO,SAAClE,GAAD,OAAOA,GAAK+D,KAF3C,GAgBMI,CAAMT,EAAKD,IChBrB,IAAMW,EAAb,WAKE,WAAYC,EAAQC,GAAS,oBAC3BC,KAAKF,OAASA,EACdE,KAAKD,OAASA,EACdC,KAAKvD,WAAaC,KAAKC,MAR3B,qDAYI,MAAO,CACLmD,OAAQE,KAAKF,OACbC,OAAQC,KAAKD,OACbtD,WAAYuD,KAAKvD,eAfvB,4BAmBcwD,GACV,OAAOC,OAAOC,OACZ,IAAIN,EACY,kBAATI,EAAoBnF,KAAKC,MAAMkF,GAAQA,OAtBpD,KA2BaG,EAAb,WAME,WAAYN,EAAQC,GAAmB,IAAXzE,EAAU,uDAAH,EAAG,oBACpC0E,KAAKF,OAASA,EACdE,KAAKD,OAASA,EACdC,KAAK1E,KAAOA,EACZ0E,KAAKvD,WAAaC,KAAKC,MAV3B,qDA2BI,MAAO,CACLmD,OAAQE,KAAKF,OACbC,OAAQC,KAAKD,OACbzE,KAAM0E,KAAK1E,KACXmB,WAAYC,KAAKC,SA/BvB,iCAcI,OAAQqD,KAAK1E,MACX,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,YACT,QACE,OAAO,SAtBf,4BAmCc2E,GACV,OAAOC,OAAOC,OACZ,IAAIC,EACY,kBAATH,EAAoBnF,KAAKC,MAAMkF,GAAQA,OAtCpD,KA2CaI,EAAb,WAME,WAAY3B,EAAM4B,EAAYC,GAAa,oBACzCP,KAAKtB,KAAOA,EACZsB,KAAKM,WAAaA,EAClBN,KAAKO,WAAaA,EAClBP,KAAKQ,cAAgB,GACrBR,KAAKS,WAAalB,EAAuB,IACzCS,KAAKU,OAAS,GACdV,KAAKW,gBAAkB,GACvBX,KAAKY,aAAerB,EAAuBgB,EAAYD,GACvDN,KAAKa,SAAW,GAChBb,KAAKvD,WAAaC,KAAKC,MAhB3B,oDAoBIqD,KAAKQ,cAAgB,GACrBR,KAAKS,WAAalB,EAAuB,IACzCS,KAAKU,OAAS,GACdV,KAAKW,gBAAkB,GACvBX,KAAKY,aAAerB,EAClBS,KAAKO,WACLP,KAAKM,YAEPN,KAAKa,SAAW,KA5BpB,uCAgCIb,KAAKY,aAAe/B,EAAQmB,KAAKY,gBAhCrC,qCAoCIZ,KAAKS,WAAa5B,EAAQmB,KAAKS,cApCnC,wCAwCI,IAAMX,EAASE,KAAKS,WAAWK,MAK/B,OAJIhB,IACFE,KAAKQ,cAAc/C,KAAKqC,GACxBE,KAAKe,gBAEAjB,IA7CX,0CAiDI,IAAMA,EAASE,KAAKY,aAAaE,MAKjC,OAJIhB,IACFE,KAAKW,gBAAgBlD,KAAKqC,GAC1BE,KAAKgB,kBAEAlB,IAtDX,+BAyDWA,GACP,OAAOE,KAAKU,OAAO5D,MAAK,SAACmE,GAAD,OAAOA,EAAEnB,SAAWA,OA1DhD,+BA6DWA,GACP,GAAIE,KAAKU,OAAOlE,OAAS,EACvB,OAAO,IAAI4D,EAAWN,EAAQ,KAAME,KAAKU,OAAOlE,OAAS,KA/D/D,+BAmEW0E,GACP,IAAMC,EAAQnB,KAAKU,OAAOU,WAAU,SAACH,GAAD,OAAOA,EAAEnB,SAAWoB,EAAMpB,UAC9DE,KAAKU,QAAkB,IAAXS,EAAeA,EAAQnB,KAAKU,OAAOlE,QAAU0E,IArE7D,kCAwEcA,GACVlB,KAAKU,OAASV,KAAKU,OAAOf,QAAO,SAACsB,GAAD,OAAOA,EAAEnB,SAAWoB,EAAMpB,YAzE/D,kCA6EI,OAAOE,KAAKU,OAAOW,OAAO,GAAG,KA7EjC,kCAgFcH,GACV,OAAQlB,KAAKsB,aAAe,IAAIxB,SAAWoB,EAAMpB,SAjFrD,iCAoFaA,GACT,IAAMwB,EAAYtB,KAAKsB,YAIvB,OAFEA,GAAatB,KAAKQ,cAAce,QAAQD,EAAUxB,SAClCE,KAAKQ,cAAce,QAAQzB,KAxFjD,iCA4FaA,GACT,OAAOE,KAAKa,SAAS/D,MAAK,SAAC0E,GAAD,OAAOA,EAAE1B,SAAWA,OA7FlD,iCAgGaA,GACT,OAAO,IAAID,EAAaC,EAAQ,QAjGpC,iCAoGa2B,GACT,IAAMN,EAAQnB,KAAKa,SAASO,WAC1B,qBAAGtB,SAAwB2B,EAAQ3B,UAErCE,KAAKa,UAAoB,IAAXM,EAAeA,EAAQnB,KAAKa,SAASrE,QAAUiF,IAxGjE,+BA4GI,MAAO,CACL/C,KAAMsB,KAAKtB,KACX4B,WAAYN,KAAKM,WACjBC,WAAYP,KAAKO,WACjBC,cAAeR,KAAKQ,cACpBC,WAAYT,KAAKS,WACjBC,OAAQV,KAAKU,OAAOlF,KAAI,SAACkG,GAAD,OAAOA,EAAEC,YACjCf,aAAcZ,KAAKY,aACnBD,gBAAiBX,KAAKW,gBACtBE,SAAUb,KAAKa,SAASrF,KAAI,SAACkG,GAAD,OAAOA,EAAEC,YACrClF,WAAYuD,KAAKvD,eAtHvB,4BA0HcwD,GAAO,IAAD,EAEE,kBAATA,EAAoBnF,KAAKC,MAAMkF,GAAQA,EAFhC,IACRS,cADQ,MACC,GADD,MACKG,gBADL,MACgB,GADhB,EACuBe,EADvB,qCAIhB,OAAO1B,OAAOC,OAAO,IAAIE,EAAlBH,OAAA,IAAAA,QAAA,IAAAA,CAAA,GACF0B,GADE,IAELlB,OAAQA,EAAOlF,KAAI,SAACqG,GAAD,OAAOzB,EAAWZ,KAAKqC,MAC1ChB,SAAUA,EAASrF,KAAI,SAACqG,GAAD,OAAOhC,EAAaL,KAAKqC,aAjItD,KC3CMC,G,OAAa,CACjB,YACA,eACA,OACA,aACA,QACA,QACA,SACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,gBACA,WACA,YACA,WACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,QACA,cACA,OACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,aACA,YACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,gBAOIC,GAAa,CACjBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAGhBE,GAAe,CACnBD,WAAY,CAAED,KAAM,GAAIG,OAAQ,IASlC,SAASC,KACP,IAAIlF,EAAUC,cACRd,EAAWU,IAAXV,OAFc,EAGEgG,qBAHF,mBAGbpD,EAHa,KAGRqD,EAHQ,OAIED,qBAJF,mBAIbnD,EAJa,KAIRqD,EAJQ,KAMpB,OACE,cAAC,IAAD,CAAKC,QAAQ,SAASC,OAAQ,CAAC,GAAI,IAAnC,SACE,cAAC,IAAD,CAAKC,KAAK,WAAV,SACE,eAAC,IAAD,2BACMZ,IADN,IAEErD,KAAK,OACLkE,cAAe,CAAEC,UAAU,GAC3BC,cAAc,EACdC,SAAU,YAAyB,IAAtBrE,EAAqB,EAArBA,KAAMQ,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAChB6D,EAAU1G,EAAO,IAAI+D,EAAU3B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","file":"static/js/main.73608214.chunk.js","sourcesContent":["import { createContext, useReducer, useEffect, useContext } from \"react\";\n\nconst STORAGE_KEY = \"games\";\nconst StorageContext = createContext([]);\nconst initialState = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\nconst ACTIONS = {\n  set: \"set\",\n  create: \"create\",\n  update: \"update\",\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.set:\n      return action.payload || [];\n    case ACTIONS.create:\n      return [...state, action.payload];\n    case ACTIONS.update:\n      return state.map((e) =>\n        e.id === action.payload.id ? action.payload : e\n      );\n    default:\n      throw new Error(`unsupported action: ${JSON.stringify(action)}`);\n  }\n}\n\nconst StorageProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <StorageContext.Provider\n      value={{\n        state,\n        set: (payload) => {\n          dispatch({ type: ACTIONS.set, payload });\n        },\n        create: (item) => {\n          const payload = {\n            id: state.length + 1,\n            created_at: Date.now(),\n            ...item,\n          };\n          dispatch({ type: ACTIONS.create, payload });\n          return payload;\n        },\n        update: (item) => {\n          const payload = { ...item, updated: Date.now() };\n          dispatch({ type: ACTIONS.update, payload });\n          return payload;\n        },\n        find: (needle) => {\n          return state.find(({ id }) => id === needle);\n        },\n      }}\n    >\n      {children}\n    </StorageContext.Provider>\n  );\n};\n\nconst useStorage = () => useContext(StorageContext);\n\nexport { StorageProvider, StorageContext, useStorage };\n","import { Link, useHistory } from \"react-router-dom\";\nimport { Button, Card, Tooltip, List } from \"antd\";\nimport { useStorage } from \"context/Storage\";\nimport { FileAddOutlined, CheckCircleOutlined } from \"@ant-design/icons\";\n\nfunction Home() {\n  let history = useHistory();\n  const { state: games } = useStorage();\n\n  return (\n    <Card>\n      <Tooltip title=\"opprett nytt spill\">\n        <Button\n          data-testid=\"opprett nytt spill\"\n          onClick={() => history.push(\"/game\")}\n          type=\"primary\"\n          icon={<FileAddOutlined />}\n        >\n          Lag spill\n        </Button>\n      </Tooltip>\n\n      <List\n        locale={{ emptyText: <></> }}\n        itemLayout=\"horizontal\"\n        dataSource={games}\n        pagination={{\n          pageSize: 10,\n          hideOnSinglePage: true,\n        }}\n        renderItem={(game) => (\n          <List.Item>\n            <List.Item.Meta\n              avatar={<CheckCircleOutlined />}\n              title={<Link to={`/game/${game.id}`}>{game.name}</Link>}\n              description={`${game.name}: ${new Date(\n                game.created_at\n              ).toLocaleString()}`}\n            />\n          </List.Item>\n        )}\n      />\n    </Card>\n  );\n}\n\nexport default Home;\n","export function range(to, from = 1) {\n  if (!to) {\n    return [];\n  }\n  return [...Array(to + 1).keys()].filter((e) => e >= from);\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max + 1 - min) + min);\n}\n\nexport function shuffle(a) {\n  const result = [...a];\n  result.sort((_) => randomInt(-1, 1));\n  return result;\n}\n\nexport function randomNumberRangeArray(max, min) {\n  return shuffle(range(max, min));\n}\n","import { randomNumberRangeArray, shuffle } from \"GameUtils\";\n\nexport class TombolaModel {\n  /**\n   * @param {Number} number\n   * @param {String} winner\n   */\n  constructor(number, winner) {\n    this.number = number;\n    this.winner = winner;\n    this.created_at = Date.now();\n  }\n\n  toJSON() {\n    return {\n      number: this.number,\n      winner: this.winner,\n      created_at: this.created_at,\n    };\n  }\n\n  static from(json) {\n    return Object.assign(\n      new TombolaModel(),\n      typeof json === \"string\" ? JSON.parse(json) : json\n    );\n  }\n}\n\nexport class BingoModel {\n  /**\n   * @param {Number} number\n   * @param {String} winner\n   * @param {1|2|3} type\n   */\n  constructor(number, winner, type = 1) {\n    this.number = number;\n    this.winner = winner;\n    this.type = type;\n    this.created_at = Date.now();\n  }\n\n  get localeType() {\n    switch (this.type) {\n      case 1:\n        return \"En rad\";\n      case 2:\n        return \"To rader\";\n      case 3:\n        return \"Fullt hus\";\n      default:\n        return null;\n    }\n  }\n\n  toJSON() {\n    return {\n      number: this.number,\n      winner: this.winner,\n      type: this.type,\n      created_at: Date.now(),\n    };\n  }\n\n  static from(json) {\n    return Object.assign(\n      new BingoModel(),\n      typeof json === \"string\" ? JSON.parse(json) : json\n    );\n  }\n}\n\nexport class GameModel {\n  /**\n   * @param {String} name\n   * @param {Number} min_ticket\n   * @param {Number} max_ticket\n   */\n  constructor(name, min_ticket, max_ticket) {\n    this.name = name;\n    this.min_ticket = min_ticket;\n    this.max_ticket = max_ticket;\n    this.bingo_numbers = [];\n    this.bingo_pool = randomNumberRangeArray(90);\n    this.bingos = [];\n    this.tombola_numbers = [];\n    this.tombola_pool = randomNumberRangeArray(max_ticket, min_ticket);\n    this.tombolas = [];\n    this.created_at = Date.now();\n  }\n\n  reset() {\n    this.bingo_numbers = [];\n    this.bingo_pool = randomNumberRangeArray(90);\n    this.bingos = [];\n    this.tombola_numbers = [];\n    this.tombola_pool = randomNumberRangeArray(\n      this.max_ticket,\n      this.min_ticket\n    );\n    this.tombolas = [];\n  }\n\n  shuffleTombola() {\n    this.tombola_pool = shuffle(this.tombola_pool);\n  }\n\n  shuffleBingo() {\n    this.bingo_pool = shuffle(this.bingo_pool);\n  }\n\n  drawBingoNumber() {\n    const number = this.bingo_pool.pop();\n    if (number) {\n      this.bingo_numbers.push(number);\n      this.shuffleBingo();\n    }\n    return number;\n  }\n\n  drawTombolaNumber() {\n    const number = this.tombola_pool.pop();\n    if (number) {\n      this.tombola_numbers.push(number);\n      this.shuffleTombola();\n    }\n    return number;\n  }\n\n  getBingo(number) {\n    return this.bingos.find((b) => b.number === number);\n  }\n\n  newBingo(number) {\n    if (this.bingos.length < 3) {\n      return new BingoModel(number, null, this.bingos.length + 1);\n    }\n  }\n\n  addBingo(bingo) {\n    const index = this.bingos.findIndex((b) => b.number === bingo.number);\n    this.bingos[index !== -1 ? index : this.bingos.length] = bingo;\n  }\n\n  removeBingo(bingo) {\n    this.bingos = this.bingos.filter((b) => b.number !== bingo.number);\n  }\n\n  lastBingo() {\n    return this.bingos.slice(-1)[0];\n  }\n\n  isLastBingo(bingo) {\n    return (this.lastBingo() || {}).number === bingo.number;\n  }\n\n  bingoAfter(number) {\n    const lastBingo = this.lastBingo();\n    const lastBingoPos =\n      lastBingo && this.bingo_numbers.indexOf(lastBingo.number);\n    const numberPos = this.bingo_numbers.indexOf(number);\n    return lastBingoPos > numberPos;\n  }\n\n  getTombola(number) {\n    return this.tombolas.find((t) => t.number === number);\n  }\n\n  newTombola(number) {\n    return new TombolaModel(number, null);\n  }\n\n  addTombola(tombola) {\n    const index = this.tombolas.findIndex(\n      ({ number }) => number === tombola.number\n    );\n    this.tombolas[index !== -1 ? index : this.tombolas.length] = tombola;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      min_ticket: this.min_ticket,\n      max_ticket: this.max_ticket,\n      bingo_numbers: this.bingo_numbers,\n      bingo_pool: this.bingo_pool,\n      bingos: this.bingos.map((m) => m.toJSON()),\n      tombola_pool: this.tombola_pool,\n      tombola_numbers: this.tombola_numbers,\n      tombolas: this.tombolas.map((m) => m.toJSON()),\n      created_at: this.created_at,\n    };\n  }\n\n  static from(json) {\n    const { bingos = [], tombolas = [], ...model } =\n      typeof json === \"string\" ? JSON.parse(json) : json;\n\n    return Object.assign(new GameModel(), {\n      ...model,\n      bingos: bingos.map((j) => BingoModel.from(j)),\n      tombolas: tombolas.map((j) => TombolaModel.from(j)),\n    });\n  }\n}\n","import { useState, useRef, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Badge,\n  Tooltip,\n  Divider,\n  Drawer,\n  List,\n  Space,\n  Carousel,\n} from \"antd\";\nimport {\n  PlusOutlined,\n  CompassOutlined,\n  SaveOutlined,\n  DeleteOutlined,\n  CloseSquareOutlined,\n  HomeOutlined,\n} from \"@ant-design/icons\";\nimport { useStorage } from \"context/Storage\";\nimport { GameModel } from \"models/Game\";\nimport \"components/Game.css\"; // keyframes and scoping are wonky, just use regular css for keyframes\n\nconst ballColors = [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkCyan\",\n  \"DarkGoldenrod\",\n  \"DarkGray\",\n  \"DarkGreen\",\n  \"DarkGrey\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"DarkOrange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkSlateGrey\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"Goldenrod\",\n  \"Gray\",\n  \"Green\",\n  \"GreenYellow\",\n  \"Grey\",\n  \"Honeydew\",\n  \"HotPink\",\n  \"IndianRed\",\n  \"Indigo\",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenrodYellow\",\n  \"LightGray\",\n  \"LightGreen\",\n  \"LightGrey\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSlateGrey\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquamarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenrod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"Rebeccapurple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"Seashell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"SlateGrey\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"White\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\",\n];\n\nconst ballColor = (num) => {\n  return ballColors[num % ballColors.length];\n};\n\nconst formLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 18 },\n};\n\nconst buttonLayout = {\n  wrapperCol: { span: 18, offset: 4 },\n};\n\nfunction GameView() {\n  let { id: idS } = useParams();\n  let id = parseInt(idS);\n  return id ? <ShowGame id={id} /> : <CreateGame />;\n}\n\nfunction CreateGame() {\n  let history = useHistory();\n  let { create } = useStorage();\n  const [min, setMin] = useState();\n  const [max, setMax] = useState();\n\n  return (\n    <Row justify=\"center\" gutter={[10, 25]}>\n      <Col flex=\"0 1 50vw\">\n        <Form\n          {...formLayout}\n          name=\"game\"\n          initialValues={{ remember: true }}\n          requiredMark={false}\n          onFinish={({ name, min, max }) => {\n            const newGame = create(new GameModel(name, min, max).toJSON());\n            history.push(\"/game/\" + newGame.id);\n          }}\n        >\n          <Form.Item\n            label=\"Navn\"\n            name=\"name\"\n            rules={[{ required: true, message: \"Oppgi navn på spill\" }]}\n          >\n            <Input placeholder=\"navn på dette spillet\" />\n          </Form.Item>\n\n          <Form.Item label=\"Bonger\">\n            <Tooltip title=\"Brukes til å trekke tall ved Tombola\">\n              <Input.Group compact>\n                <Form.Item\n                  name=\"min\"\n                  rules={[\n                    { required: true, message: \"angi første bong\" },\n                    {\n                      max,\n                      type: \"number\",\n                      message: \"må være mindre siste bong\",\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    style={{ width: \"100%\" }}\n                    placeholder=\"Første\"\n                    onChange={(v) => v && setMin(v)}\n                  />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"max\"\n                  rules={[\n                    { required: true, message: \"angi siste bong\" },\n                    {\n                      min,\n                      type: \"number\",\n                      message: \"må være større enn første\",\n                    },\n                  ]}\n                >\n                  <InputNumber\n                    style={{ width: \"100%\" }}\n                    placeholder=\"Siste\"\n                    onChange={(v) => v && setMax(v)}\n                  />\n                </Form.Item>\n              </Input.Group>\n            </Tooltip>\n          </Form.Item>\n\n          <Form.Item {...buttonLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Start spill\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n}\n\nfunction ShowGame({ id }) {\n  let history = useHistory();\n  let { find, update } = useStorage();\n  let [showTombola, setShowTombola] = useState(false);\n  let [tombola, setTombola] = useState();\n  let [selected, setSelected] = useState();\n  let [editing, setEditing] = useState();\n  let game = GameModel.from(find(id));\n\n  const onEdit = (bingo) => {\n    setSelected();\n    setEditing(bingo);\n  };\n\n  const onSelect = (bingo) => {\n    setSelected(bingo);\n    setEditing();\n  };\n\n  return (\n    <>\n      <Divider>\n        {game.name} @ {new Date(game.created_at).toLocaleString()}\n      </Divider>\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col flex=\"0 1 50vw\">\n          <Space>\n            <Tooltip placement=\"bottomLeft\" title=\"Trekk et bingotall\">\n              <Button\n                disabled={game.bingos.length === 3}\n                size=\"large\"\n                onClick={() => {\n                  game.drawBingoNumber() && update(game);\n                }}\n                type=\"default\"\n                shape=\"circle\"\n                icon={<PlusOutlined />}\n              />\n            </Tooltip>\n            <Tooltip placement=\"bottomLeft\" title=\"Tombola\">\n              <Button\n                size=\"large\"\n                onClick={() => {\n                  setShowTombola(!showTombola);\n                }}\n                type=\"default\"\n                shape=\"circle\"\n                icon={<CompassOutlined />}\n              />\n            </Tooltip>\n            <Tooltip placement=\"bottomLeft\" title=\"Lagre og lukk\">\n              <Button\n                danger\n                size=\"large\"\n                onClick={() => {\n                  history.push(\"/\");\n                }}\n                type=\"default\"\n                shape=\"circle\"\n                icon={<SaveOutlined />}\n              />\n            </Tooltip>\n          </Space>\n        </Col>\n      </Row>\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col flex=\"0 1 50vw\">\n          {!editing && !selected && (\n            <div style={{ padding: \"2vh\" }}>\n              <BingoNumbers {...{ game, onEdit, onSelect }} />\n            </div>\n          )}\n\n          {selected && (\n            <div style={{ border: \"1px solid #ddd\", padding: \"2vh\" }}>\n              <BingoNumbers\n                {...{ game, onEdit, onSelect, activeNum: selected }}\n              />\n              <BingoForm\n                game={game}\n                bingo={selected}\n                onSave={(bingo) => {\n                  game.addBingo(bingo);\n                  update(game);\n                  onSelect();\n                }}\n                onClose={() => {\n                  onSelect();\n                }}\n              />\n            </div>\n          )}\n          {editing && (\n            <div style={{ border: \"1px solid #ddd\", padding: \"2vh\" }}>\n              <BingoNumbers\n                {...{ game, onEdit, onSelect, activeNum: editing }}\n              />\n              <BingoForm\n                game={game}\n                bingo={editing}\n                onSave={(bingo) => {\n                  game.addBingo(bingo);\n                  update(game);\n                  onEdit();\n                }}\n                onClose={() => {\n                  onEdit();\n                }}\n                onDelete={(bingo) => {\n                  game.removeBingo(bingo);\n                  update(game);\n                  onEdit();\n                }}\n              />\n            </div>\n          )}\n        </Col>\n      </Row>\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col flex=\"0 1 50vw\">\n          <BingoList {...{ game, selected }} />\n        </Col>\n      </Row>\n      <Divider />\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col flex=\"0 1 50vw\">\n          <TombolaList\n            game={game}\n            onClick={(tombola) => {\n              setShowTombola(true);\n              setTombola(tombola);\n            }}\n          />\n        </Col>\n      </Row>\n      <Drawer\n        title=\"Tombola!\"\n        placement=\"top\"\n        height=\"100vh\"\n        closable={false}\n        onClose={() => setShowTombola(false)}\n        visible={showTombola}\n        getContainer={false}\n        style={{ position: \"absolute\" }}\n      >\n        <Tombola\n          game={game}\n          tombola={tombola}\n          onClose={() => setShowTombola(false)}\n        />\n      </Drawer>\n    </>\n  );\n}\n\nfunction BingoNumbers({ game, onEdit, onSelect, activeNum }) {\n  return game.bingo_numbers.map((num) => {\n    const bingoAfter = game.bingoAfter(num);\n    const bingo = game.getBingo(num);\n    const newBingo = game.newBingo(num);\n\n    return bingo ? (\n      <Tooltip key={num} title={!bingoAfter && \"Trykk for å redigere Bingo!\"}>\n        <Badge\n          style={{ backgroundColor: \"#eee\", color: \"black\" }}\n          count={bingo.type !== 3 ? bingo.type + \"x\" : <HomeOutlined />}\n          offset={[-10, 2]}\n        >\n          <Button\n            danger\n            onClick={() => !bingoAfter && onEdit(bingo)}\n            type=\"default\"\n            size=\"large\"\n            shape=\"circle\"\n          >\n            {num}\n          </Button>\n        </Badge>\n      </Tooltip>\n    ) : (\n      <Tooltip\n        key={num}\n        title={bingoAfter || !newBingo ? \"\" : \"Trykk for å angi Bingo!\"}\n      >\n        <Button\n          disabled={bingoAfter || !newBingo}\n          onClick={() => onSelect(newBingo)}\n          type={num === activeNum ? \"primary\" : \"default\"}\n          size=\"large\"\n          shape=\"circle\"\n        >\n          {num}\n        </Button>\n      </Tooltip>\n    );\n  });\n}\n\nfunction BingoForm({ game, bingo, onSave, onClose, onDelete = () => {} }) {\n  const exists = game.getBingo(bingo.number);\n  const disabled = exists && !game.isLastBingo(bingo);\n  return (\n    <Form\n      style={{ marginTop: \"5vh\", padding: \"2vh\" }}\n      initialValues={bingo.toJSON()}\n      {...formLayout}\n      name=\"bingo\"\n      requiredMark={false}\n      onFinish={(values) => {\n        bingo.winner = values.winner;\n        onSave(bingo);\n      }}\n    >\n      <Form.Item label=\"Vinnertall\">\n        <Button danger={exists} type=\"primary\" size=\"medium\" shape=\"circle\">\n          {bingo.number}\n        </Button>\n      </Form.Item>\n      <Form.Item label=\"Type\" disabled>\n        <Input value={bingo.localeType} disabled />\n      </Form.Item>\n      <Form.Item\n        label=\"Vinner\"\n        name=\"winner\"\n        initialValue={bingo.winner}\n        rules={[{ required: true, message: \"Oppgi navn på vinner\" }]}\n      >\n        <Input disabled={disabled} placeholder=\"navn på vinner\" />\n      </Form.Item>\n      <Form.Item {...buttonLayout}>\n        <Space>\n          <Button\n            disabled={disabled}\n            type=\"primary\"\n            htmlType=\"submit\"\n            icon={<SaveOutlined />}\n          >\n            Lagre\n          </Button>\n          <Button\n            onClick={onClose}\n            type=\"default\"\n            icon={<CloseSquareOutlined />}\n          >\n            Lukk\n          </Button>\n          {exists && (\n            <Button\n              danger\n              disabled={disabled}\n              onClick={() => onDelete(bingo)}\n              type=\"default\"\n              icon={<DeleteOutlined />}\n            >\n              Slett\n            </Button>\n          )}\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n}\n\nfunction BingoList({ game }) {\n  return (\n    <List\n      locale={{ emptyText: <></> }}\n      itemLayout=\"horizontal\"\n      dataSource={game.bingos}\n      renderItem={(bingo) => (\n        <List.Item>\n          <List.Item.Meta\n            avatar={\n              <Badge\n                style={{ backgroundColor: \"#eee\", color: \"black\" }}\n                count={bingo.type !== 3 ? bingo.type + \"x\" : <HomeOutlined />}\n                offset={[-10, 2]}\n              >\n                <Button danger type=\"default\" size=\"large\" shape=\"circle\">\n                  {bingo.number}\n                </Button>\n              </Badge>\n            }\n            title={bingo.winner}\n            description={`${bingo.localeType}: ${new Date(\n              bingo.created_at\n            ).toLocaleString()}`}\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n\nfunction Tombola({ game, onClose, tombola }) {\n  const contentStyle = {\n    height: \"160px\",\n    lineHeight: \"160px\",\n    textAlign: \"center\",\n    background: \"#364d79\",\n  };\n  const boxStyle = {\n    height: \"140px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  };\n  let { update } = useStorage();\n  const carouselRef = useRef(null);\n  const [running, setRunning] = useState(false);\n  const [number, setNumber] = useState();\n  useEffect(() => {\n    if (tombola) {\n      setNumber(tombola.number);\n    }\n  }, [tombola]);\n  useEffect(() => {\n    let ticks = 0;\n    let pid = setInterval(() => {\n      console.log({ ticks });\n      if (!running) {\n        clearInterval(pid);\n      }\n      if (ticks > 50) {\n        setRunning(false);\n        setNumber(game.drawTombolaNumber());\n      } else {\n        running && carouselRef.current.next();\n        ticks += 1;\n      }\n    }, 200);\n\n    return () => {\n      ticks = 0;\n      clearInterval(pid);\n    };\n  }, [running, game]);\n\n  return (\n    <>\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col span={6} />\n        <Col span={12}>\n          {number ? (\n            <div>\n              <div style={contentStyle}>\n                <div style={boxStyle} className=\"box\">\n                  <TombolaBall number={number} className=\"tombolaStop\" />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <Carousel ref={carouselRef}>\n              {game.tombola_pool.slice(0, 33).map((num) => (\n                <div key={num}>\n                  <div style={contentStyle}>\n                    <div style={boxStyle} className=\"box\">\n                      <TombolaBall\n                        number={num}\n                        className={running ? \"tombolaSpin\" : \"\"}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </Carousel>\n          )}\n        </Col>\n        <Col span={6} />\n      </Row>\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col span={6} />\n        <Col span={12}>\n          {number ? (\n            <TombolaForm\n              game={game}\n              number={number}\n              onSave={(tombola) => {\n                game.addTombola(tombola);\n                update(game);\n                setNumber();\n              }}\n              onClose={() => {\n                setNumber();\n              }}\n            />\n          ) : (\n            <>\n              {running && (\n                <Button\n                  danger\n                  onClick={() => {\n                    setRunning(false);\n                    setNumber(game.drawTombolaNumber());\n                  }}\n                  type=\"default\"\n                >\n                  Stopp\n                </Button>\n              )}\n              <Button\n                loading={running}\n                onClick={() => {\n                  setNumber();\n                  setRunning(true);\n                }}\n                type=\"primary\"\n              >\n                Kjør\n              </Button>\n              <Button disabled={running} onClick={onClose} type=\"default\">\n                Lukk\n              </Button>\n            </>\n          )}\n        </Col>\n        <Col span={6} />\n      </Row>\n      <Row justify=\"center\" gutter={[10, 25]}>\n        <Col span={6} />\n        <Col span={12}>\n          <TombolaList\n            game={game}\n            reverse\n            onClick={({ number }) => setNumber(number)}\n          />\n        </Col>\n        <Col span={6} />\n      </Row>\n    </>\n  );\n}\n\nfunction TombolaBall({ number, className, style }) {\n  const ballStyle = {\n    ...{\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"75px\",\n      width: \"75px\",\n      color: \"black\",\n      textShadow:\n        \"1px 1px 1px #FFF, -1px -1px 1px #FFF, -1px 1px 1px #FFF, 1px -1px 1px #FFF\",\n      fontSize: \"22px\",\n      fontWeight: \"bold\",\n      borderRadius: \"50%\",\n      backgroundColor: \"red\",\n      border: \"thin solid #ddd\",\n    },\n    ...style,\n  };\n  return (\n    <div\n      style={{\n        ...ballStyle,\n        backgroundColor: ballColor(number),\n      }}\n      className={className}\n    >\n      {number}\n    </div>\n  );\n}\n\nfunction TombolaForm({ game, number, onSave, onClose }) {\n  const tombola = game.getTombola(number) || game.newTombola(number);\n  return (\n    <Form\n      style={{ marginTop: \"5vh\", padding: \"2vh\" }}\n      initialValues={tombola.toJSON()}\n      {...formLayout}\n      name=\"tombola\"\n      requiredMark={false}\n      onFinish={(values) => {\n        tombola.winner = values.winner;\n        onSave(tombola);\n      }}\n    >\n      <Form.Item label=\"Vinnertall\">\n        <TombolaBall number={tombola.number} />\n      </Form.Item>\n      <Form.Item\n        label=\"Vinner\"\n        name=\"winner\"\n        initialValue={tombola.winner}\n        rules={[{ required: true, message: \"Oppgi navn på vinner\" }]}\n      >\n        <Input placeholder=\"navn på vinner\" />\n      </Form.Item>\n      <Form.Item {...buttonLayout}>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\" icon={<SaveOutlined />}>\n            Lagre\n          </Button>\n          <Button\n            onClick={onClose}\n            type=\"default\"\n            icon={<CloseSquareOutlined />}\n          >\n            Lukk\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n}\n\nfunction TombolaList({ game, reverse, onClick }) {\n  return (\n    <List\n      locale={{ emptyText: <></> }}\n      itemLayout=\"horizontal\"\n      dataSource={reverse ? [...game.tombolas].reverse() : game.tombolas}\n      pagination={{\n        pageSize: 3,\n        hideOnSinglePage: true,\n      }}\n      renderItem={(tombola) => (\n        <List.Item>\n          <List.Item.Meta\n            avatar={\n              <TombolaBall\n                number={tombola.number}\n                style={{\n                  height: \"40px\",\n                  width: \"40px\",\n                  fontSize: \"14px\",\n                  fontWeight: \"normal\",\n                  cursor: \"pointer\",\n                }}\n              />\n            }\n            onClick={() => {\n              onClick && onClick(tombola);\n            }}\n            title={tombola.winner}\n            description={new Date(tombola.created_at).toLocaleString()}\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n\nexport default GameView;\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { StorageProvider } from \"context/Storage\";\nimport Home from \"components/Home\";\nimport Game from \"components/Game\";\nimport \"App.css\";\n\nfunction App() {\n  return (\n    <StorageProvider>\n      <Router basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/game/:id\">\n            <Game />\n          </Route>\n          <Route path=\"/game\">\n            <Game />\n          </Route>\n        </Switch>\n      </Router>\n    </StorageProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"index.css\";\nimport App from \"App\";\nimport reportWebVitals from \"reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}